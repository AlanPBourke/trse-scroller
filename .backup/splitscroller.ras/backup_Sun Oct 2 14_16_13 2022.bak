/*from to
311  14 Non-visible part of the top of the screen / Non-visible part of the upper border (16 lines)
 15  50 Visible part of the upper border (36 lines)
 51 250 Regular (and visible, doh!) part of the display / Screen background (200 lines)
251 299 Visible part of the lower border (49 lines)
300 302 Visible part of the vertical blanking interval (VBI) / Very bottom of the visible screen  (3 lines)
303 310 Non-visible part of the vertical blanking interval (VBI) (8 lines)
*/

/* https://lemonspawn.com/turbo-rascal-syntax-error-expected-but-begin/turbo-rascal-se-tutorials/tutorial-8-full-screen-smooth-scrolling-know-your-timing-banking/ */
/* http://1amstudios.com/2014/12/07/c64-smooth-scrolling*/

program SplitScroller;
@use "input/key"
var

	@define charsetLoc1 	$2800
	@define charsetLoc2 	$6800
	@define fontLoc 		$7000
	@define useKernal		"0"
	@define bank2ClearVal 	$20
	@define charVal 		$68	
	
	// Various
	val, scrollsplit, row, col : byte = 0;
	startrow, endrow, this_color, this_char : byte;
	scroll : byte = 0;
	//radial : integer;
	keyin : byte = 0;
	g_currentBank:byte = 0;
	
	// Place charset on both bank 0 and 1
	charset: IncBin("resources/charsets/Capcon.bin", @charsetLoc1);
	charset1_2: IncBin("resources/charsets/Capcon.bin", @charsetLoc2);
	// 2x2 font included at some random position
	font: IncBin("resources/charsets/charset_16x16.bin",@fontLoc);
	
	saddr : array[25] of integer;
	saddr2 : array[25] of integer;
	caddr : array[25] of integer;
	zeropage1 : pointer;

procedure waitforspace();
begin
	keyin := 0;
	while (keyin = 0) do begin
		Key::Read();
		if  Key::Pressed( Key::KSPACE )  then keyin :=1;
	end;	
end;

procedure CopyHScreen(ul_:byte);
begin
	
	
	if g_currentBank = 0 offpage then begin
		if ul_=0 then
			// screen 1 to screen 2
			copyhalfscreen(^$0400 + ^520, ^$4400 -^1 + ^520, 13, 1,0)
		else
			// screen 2 to screen 1
			copyhalfscreen(^$0400, ^$4400 -^1, 13, 1,0);
		
	end;
	
	
	if g_currentBank = 1 offpage then begin
		if ul_=0 then
			// screen 1 to screen 2
			copyhalfscreen(^$4400+^520, ^$0400 - ^1 + ^520, 13, 1,0)
		else
			// screen 2 to screen 1
			copyhalfscreen(^$4400, ^$0400 - ^1,13, 1,0);
	end;

end;

procedure ShiftColors(ul : byte);
begin
	
	if ul = 0 then
	begin
		startrow := 0;
		endrow := 12;
	end
	else
	begin
		startrow := 13;
		endrow := 24;		
	end;
	
	fori row := startrow to endrow do 
	begin
		for col := 0 to 39 do
		begin
			// col, row
			colormemory := AddressTable( #caddr, col, row );
			colormemory[0] := colormemory[1];
		    colormemory[1] := this_color;
		end;
	end;

	inc(this_color);
	if this_color > $A then this_color := 1;	

end;

/*
Switches between bank 0 and 1
*/
procedure SwitchBank();
begin

	if g_currentBank=0 then
		SetBank(VIC_BANK1)
	else
		SetBank(VIC_BANK0);

	setcharsetlocation($2800);	
	g_currentBank := (g_currentBank + 1) & 1;
	//ShiftColors(1);
end;

procedure DrawColumn39();
begin

	
	// Always draw to the other screen.
	val := hi(screen_char_loc);						// $0400 or $4400
	if g_currentBank = 0 then val := val + $40;		// $04 or $44

	if (scroll >= 127) then begin					// >= 127 means negative number (TRSE uses 2s complement with MSB set)
		this_char := 1;
		moveto(0, 0, val);		// ScreenMemory pointer to x, y, address high
		for row := 0 to 25 do begin
			screenmemory[39] := this_char;
			screenmemory := screenmemory + screen_width;
			inc(this_char);
			if this_char > 10 then this_char := 1;
			//addbreakpoint();
		end;	
		
		// Copy top half of colour memory.
		ShiftColors(0);
		scroll := 7;
		
	end;
		
end;



/*
	Main raster interrupt at line 1
*/
interrupt RasterMain();
begin
	StartIRQ(@useKernal);

	scroll := scroll - 2; // Scroll speed
	scrollx(scroll);
	setregularcolormode();

	DrawColumn39();

	// Prints out the current text on columm 39	
	// If scroll=1 or 3, copy upper or lower screen to the other bank

	if scroll = 1 then CopyHScreen(0);
	if scroll = 3 then CopyHScreen(1);
	// End of scroll: switch banks, reset scroll
	if (scroll = 7) then SwitchBank();

	hideborderx(1);			// 38 cols

	CloseIRQ();
	
end;

procedure fillwithchars();
begin
	
	this_char := 1;
	
	for col := 0 to 39 do begin
		for row := 0 to 24 do begin
	
			MoveTo(col, row, hi(screen_char_loc));	
			screenmemory[0] := this_char;
			inc(this_char);
			if (this_char = 11) then this_char := 1;
	
		end;
	end;
	
end;

procedure InitColors();
begin
	zeropage1 := #screen_col_loc;
	for row := 0 to screen_height do
	begin
		for col := 0 to screen_width do 
		begin
			zeropage1[col] := col;
		end;
		zeropage1 := zeropage1 + screen_width;
	end;
end;

begin
	
	// Set color background
	screen_bg_col:=grey;	
	screen_fg_col:=black;	
	CreateAddressTable( #saddr, $0400, 40, 25 );
	CreateAddressTable( #saddr2, $4400, 40, 25 );
	CreateAddressTable( #caddr, $D800, 40, 25 );   // $D800 color address, 40 characters per column, 25 rows
	// Clear screen and color memory
	ClearScreen(@bank2ClearVal, screen_char_loc + bank_size);	// $0400 + $4000
	ClearScreen(@bank2ClearVal, screen_char_loc);				// $0400();
	InitColors();
	
	hideborderx(0);
	
	//nmiirq(NMI());
	SetMemoryConfig(1, @useKernal, 0);
	StartRasterChain(RasterMain(), 1, @useKernal);
	Loop();
end.	