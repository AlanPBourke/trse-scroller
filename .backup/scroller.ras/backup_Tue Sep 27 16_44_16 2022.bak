/*from to
311  14 Non-visible part of the top of the screen / Non-visible part of the upper border (16 lines)
 15  50 Visible part of the upper border (36 lines)
 51 250 Regular (and visible, doh!) part of the display / Screen background (200 lines)
251 299 Visible part of the lower border (49 lines)
300 302 Visible part of the vertical blanking interval (VBI) / Very bottom of the visible screen  (3 lines)
303 310 Non-visible part of the vertical blanking interval (VBI) (8 lines)
*/

/* https://lemonspawn.com/turbo-rascal-syntax-error-expected-but-begin/turbo-rascal-se-tutorials/tutorial-8-full-screen-smooth-scrolling-know-your-timing-banking/ */

program Scroller;
@use "screen/screen"
var
	const kernal : byte = 0;
	const linestoscroll : byte = 3;
	this_char:byte = 1;
	scrollVal : byte=0;
	row : byte=0;
	col : byte=0;
	chunk : byte=0;
    saddr : array[25] of integer;	
    keyin : byte = 0;
	yposRaster : byte = 50 + linestoscroll * 8;   // raster line 50+(20 lines of 8 chars)
	lastchar_y : byte = linestoscroll - 1;
	
procedure movechars();
begin

	col := 0;
	while col <= 38 do begin
		
		row := 0;
		
		while row <= lastchar_y do begin
			
			screenmemory := AddressTable( #saddr, col, row );
			screenmemory[0] := screenmemory[1];
			inc(row);
			
		end;
		inc(col);
	end;
end;

procedure waitforspace();
begin
	keyin := 0;
	while (keyin <> KEY_SPACE) do begin
		keyin := getkey();
	end;	
end;
    
procedure UpdateScroller();
begin
	// Scroll has looped 8 pixels
	if (scrollVal=0) then 
	begin
		// Reset scroll value
		scrollVal:=7; 
		
		movechars();
//		waitforspace();
*		// Draw new RHS column.
		for row := 0 to linestoscroll  do begin

			screenmemory := AddressTable(#saddr, 39, row);
			screenmemory[0] := this_char;			

			//poke(#screen_char_loc + row * 38, 0, this_char);
		end;
	//	waitforspace();
		inc(this_char);
		screen_bg_col:=this_char;
		if (this_char > $A) then begin
			this_char := $01
		end;
		
	end
	else begin 
		dec(scrollVal);
	//	waitforspace();
	end;	
	
//	keyin := 0;
//	while (keyin <> KEY_SPACE) do begin
//		keyin := getkey();
//	end;
	
	
end;

interrupt Bottom();

interrupt Top();
begin

	StartIRQ(kernal);
	// Scroll here!
	Scrollx(scrollVal);
	RasterIRQ(Bottom(), yposRaster, kernal); // bottom os referenced here, so it needs to be forward declared
	// Update text and etc from the "Top" layer
	CloseIRQ();

end;

interrupt Bottom();
begin

	StartIRQ(kernal);
	scrollx(0); // make sure that everythingin the bottom doesn't scroll
	RasterIRQ(Top(), $00, kernal);
	UpdateScroller();
	CloseIRQ();
end;

procedure fillwithchars();
begin
	this_char := 1;
	col := 0;
	while col <= 39 do begin
		
		row := 0;
		
		while row <= 24 do begin
			
			screenmemory := AddressTable( #saddr, col, row );
			screenmemory[0] := this_char;
			
			inc(this_char);
			
			if (this_char = 11) then begin
				this_char := 1;
			end;
			
			inc(row);
			
		end;
		inc(col);
	end;
	
	this_char := 1;
	
end;



/*
	Initializes the screen etc
*/
procedure InitScreen();
begin
	
	DefineScreen();
	CreateAddressTable( #saddr, $0400, 40, 25 );
	//ScreenMemory := #screen_char_loc;
	//ScreenMemory[0] := 1;
	screen_bg_col:=black;
	screen_fg_col:=white;

	Hideborderx(1);
end;

begin
	
	disableciainterrupts();
	setmemoryconfig(1,Kernal,0);	
	
	InitScreen();
	// Let the text pointer point to the actual text
	// Start the raster chain!
	fillwithchars();
	waitforspace();
	//movechars();
	//waitforspace();
		
	StartRasterChain(Top(), 0,kernal);
	Loop(); 
end.